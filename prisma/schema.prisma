// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  kycStatus KycStatus @default(PENDING)
  
  // Profile customization fields
  phone     String?
  address   String?
  dateOfBirth DateTime?
  occupation String?
  profileImage String?
  bio       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts  Account[]
  transactions Transaction[]
  adminActions AdminAction[]
  withdrawalRequests WithdrawalRequest[]
  
  @@map("users")
}

model Account {
  id      String      @id @default(cuid())
  userId  String
  type    AccountType
  balance Float       @default(0)
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  withdrawalRequests WithdrawalRequest[]
  
  @@map("accounts")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  accountId   String?
  type        TransactionType
  amount      Float
  description String?
  createdAt   DateTime        @default(now())
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account Account? @relation(fields: [accountId], references: [id], onDelete: SetNull)
  
  @@map("transactions")
}

model AdminAction {
  id          String   @id @default(cuid())
  adminId     String
  targetUserId String?
  action      String
  details     String?
  createdAt   DateTime @default(now())
  
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@map("admin_actions")
}

model WithdrawalRequest {
  id          String   @id @default(cuid())
  userId      String
  accountId   String
  amount      Float
  bankName    String
  accountNumber String
  accountName   String
  status      WithdrawalStatus @default(PENDING)
  reason      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("withdrawal_requests")
}

enum Role {
  USER
  ADMIN
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AccountType {
  CHECKING
  SAVINGS
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
} 